// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailVerificationToken {
  id        Int      @default(autoincrement()) @id
  email     String
  name      String   @db.VarChar(50)
  password  String   @db.VarChar(200)
  token     String   @unique @db.VarChar(200) 
  expiresAt DateTime @default(dbgenerated("(DATE_ADD(NOW(), INTERVAL 24 HOUR))"))
}

model Post {
  id              String      @default(cuid()) @id
  author          User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String

  title           String
  subtitle        String      @db.Text
  body            String      @db.Text
  image           String      @db.Text
  slug            String      @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  category      Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String

  subcategory      Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId    String?

  position1       Boolean         @default(false)
  position2       Boolean         @default(false)
  position3       Boolean         @default(false)
  position4       Boolean         @default(false)
  position5       Boolean         @default(false)

  fotoIzvor       String          @default("")
}

model Category {
  id        String    @default(cuid()) @id
  name      String    @unique
  subcategories   Subcategory[]

  posts   Post[]
  hexCol  String?
}

model Subcategory {
  id            String       @default(cuid()) @id
  category      Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String

  name          String      
  posts         Post[]
  colorHex      String
} 